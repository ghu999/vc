{"ast":null,"code":"var _jsxFileName = \"/Users/granthu/VC Prototype/vc/audio-redaction-ui/frontend/src/components/AudioRedactionUI.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscriptDisplay = ({\n  transcript\n}) => {\n  _s();\n  const [selectedWord, setSelectedWord] = useState(null);\n  const handleWordClick = word => {\n    setSelectedWord(word);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: transcript.split(\" \").map((word, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => handleWordClick(word),\n        style: {\n          cursor: \"pointer\",\n          marginRight: \"5px\",\n          color: selectedWord === word ? \"blue\" : \"black\"\n        },\n        children: word\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), selectedWord && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected Word: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: selectedWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n// Example usage\n_s(TranscriptDisplay, \"Qm0y3MyhcItNJ55qmg5XvJK+9gE=\");\n_c = TranscriptDisplay;\nconst App = () => {\n  _s2();\n  const [transcript, setTranscript] = useState(\"\");\n  useEffect(() => {\n    // Fetch or import the transcript from the backend JSON file\n    fetch(\"/path/to/transcript.json\") // Adjust the API endpoint or file path\n    .then(response => response.json()).then(data => setTranscript(data.transcript));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TranscriptDisplay, {\n    transcript: transcript\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n};\n_s2(App, \"Cd4SzhU1BeW8alRDfaqSf2s8kqY=\");\n_c2 = App;\nexport default AudioRedactionUI;\nvar _c, _c2;\n$RefreshReg$(_c, \"TranscriptDisplay\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","TranscriptDisplay","transcript","_s","selectedWord","setSelectedWord","handleWordClick","word","children","split","map","index","onClick","style","cursor","marginRight","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s2","setTranscript","fetch","then","response","json","data","_c2","AudioRedactionUI","$RefreshReg$"],"sources":["/Users/granthu/VC Prototype/vc/audio-redaction-ui/frontend/src/components/AudioRedactionUI.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst TranscriptDisplay = ({ transcript }) => {\n  const [selectedWord, setSelectedWord] = useState(null);\n\n  const handleWordClick = (word) => {\n    setSelectedWord(word);\n  };\n\n  return (\n    <div>\n      <p>\n        {transcript.split(\" \").map((word, index) => (\n          <span\n            key={index}\n            onClick={() => handleWordClick(word)}\n            style={{ cursor: \"pointer\", marginRight: \"5px\", color: selectedWord === word ? \"blue\" : \"black\" }}\n          >\n            {word}\n          </span>\n        ))}\n      </p>\n      {selectedWord && <p>Selected Word: <strong>{selectedWord}</strong></p>}\n    </div>\n  );\n};\n\n// Example usage\nconst App = () => {\n  const [transcript, setTranscript] = useState(\"\");\n\n  useEffect(() => {\n    // Fetch or import the transcript from the backend JSON file\n    fetch(\"/path/to/transcript.json\") // Adjust the API endpoint or file path\n      .then((response) => response.json())\n      .then((data) => setTranscript(data.transcript));\n  }, []);\n\n  return <TranscriptDisplay transcript={transcript} />;\n};\n\nexport default AudioRedactionUI;"],"mappings":";;;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMS,eAAe,GAAIC,IAAI,IAAK;IAChCF,eAAe,CAACE,IAAI,CAAC;EACvB,CAAC;EAED,oBACEP,OAAA;IAAAQ,QAAA,gBACER,OAAA;MAAAQ,QAAA,EACGN,UAAU,CAACO,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAACH,IAAI,EAAEI,KAAK,kBACrCX,OAAA;QAEEY,OAAO,EAAEA,CAAA,KAAMN,eAAe,CAACC,IAAI,CAAE;QACrCM,KAAK,EAAE;UAAEC,MAAM,EAAE,SAAS;UAAEC,WAAW,EAAE,KAAK;UAAEC,KAAK,EAAEZ,YAAY,KAAKG,IAAI,GAAG,MAAM,GAAG;QAAQ,CAAE;QAAAC,QAAA,EAEjGD;MAAI,GAJAI,KAAK;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKN,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EACHhB,YAAY,iBAAIJ,OAAA;MAAAQ,QAAA,GAAG,iBAAe,eAAAR,OAAA;QAAAQ,QAAA,EAASJ;MAAY;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnE,CAAC;AAEV,CAAC;;AAED;AAAAjB,EAAA,CAzBMF,iBAAiB;AAAAoB,EAAA,GAAjBpB,iBAAiB;AA0BvB,MAAMqB,GAAG,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAChB,MAAM,CAACrB,UAAU,EAAEsB,aAAa,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACA2B,KAAK,CAAC,0BAA0B,CAAC,CAAC;IAAA,CAC/BC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKL,aAAa,CAACK,IAAI,CAAC3B,UAAU,CAAC,CAAC;EACnD,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOF,OAAA,CAACC,iBAAiB;IAACC,UAAU,EAAEA;EAAW;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACtD,CAAC;AAACG,GAAA,CAXID,GAAG;AAAAQ,GAAA,GAAHR,GAAG;AAaT,eAAeS,gBAAgB;AAAC,IAAAV,EAAA,EAAAS,GAAA;AAAAE,YAAA,CAAAX,EAAA;AAAAW,YAAA,CAAAF,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}