{"ast":null,"code":"var _jsxFileName = \"/Users/granthu/VC Prototype/vc/audio-redaction-ui/frontend/src/components/AudioRedactionUI.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport highlightData from \"../data/conversation-5300643.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AudioRedactionUI() {\n  _s();\n  const [transcript, setTranscript] = useState([]);\n  const fetchTranscript = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/extract-transcript\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          body: JSON.stringify(highlightData)\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"failed to fetch transcript\");\n      }\n      const data = await response.json();\n      setTranscript(data);\n    } catch (error) {\n      console.error(\"Error fetching transcript:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchTranscript();\n  }, []);\n  const [selectedWords, setSelectedWords] = useState([]);\n  const toggleWordSelection = word => {\n    if (selectedWords.includes(word)) {\n      setSelectedWords(selectedWords.filter(w => w !== word));\n    } else {\n      setSelectedWords([...selectedWords, word]);\n    }\n  };\n  const redactWords = () => {\n    alert(`Redacting: ${selectedWords.join(\", \")}`);\n    // Here, you'd trigger the redaction logic for the selected words.\n  };\n\n  // return (\n  //     <div style={{ fontFamily: \"Arial, sans-serif\", padding: \"20px\" }}>\n  //         <h1>Audio Redaction Tool</h1>\n  //         <p>Select words to redact from the transcript:</p>\n\n  //         {/* Transcript */}\n  //         <div style={{ border: \"1px solid #ddd\", padding: \"10px\", marginBottom: \"20px\" }}>\n  //             {transcript.map((item, index) => (\n  //                 <span\n  //                     key={index}\n  //                     onClick={() => toggleWordSelection(item.word)}\n  //                     style={{\n  //                         display: \"inline-block\",\n  //                         margin: \"5px\",\n  //                         padding: \"5px 10px\",\n  //                         borderRadius: \"5px\",\n  //                         cursor: \"pointer\",\n  //                         backgroundColor: selectedWords.includes(item.word)\n  //                             ? \"red\"\n  //                             : \"#f0f0f0\",\n  //                         color: selectedWords.includes(item.word)\n  //                             ? \"white\"\n  //                             : \"black\",\n  //                     }}\n  //                 >\n  //                     {item.word}\n  //                 </span>\n  //             ))}\n  //         </div>\n\n  //         {/* Redact Button */}\n  //         {selectedWords.length > 0 && (\n  //             <button\n  //                 onClick={redactWords}\n  //                 style={{\n  //                     padding: \"10px 20px\",\n  //                     backgroundColor: \"#007BFF\",\n  //                     color: \"white\",\n  //                     border: \"none\",\n  //                     borderRadius: \"5px\",\n  //                     cursor: \"pointer\",\n  //                 }}\n  //             >\n  //                 Redact Selected Words\n  //             </button>\n  //         )}\n  //     </div>\n  // );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: \"Arial, sans-serif\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Audio Redaction Tool\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transcript loaded from the JSON file:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\",\n        border: \"1px solid #ddd\",\n        padding: \"10px\"\n      },\n      children: transcript.length > 0 ? transcript.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: item.word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 27\n        }, this), \" (start: \", item.start, \", end: \", item.end, \")\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 23\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading transcript...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 7\n  }, this);\n}\n_s(AudioRedactionUI, \"ADr+s5vnMwQPURcTuh8ELagpa24=\");\n_c = AudioRedactionUI;\nexport default AudioRedactionUI;\nvar _c;\n$RefreshReg$(_c, \"AudioRedactionUI\");","map":{"version":3,"names":["React","useEffect","useState","highlightData","jsxDEV","_jsxDEV","AudioRedactionUI","_s","transcript","setTranscript","fetchTranscript","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","console","selectedWords","setSelectedWords","toggleWordSelection","word","includes","filter","w","redactWords","alert","join","style","fontFamily","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","border","length","map","item","index","start","end","_c","$RefreshReg$"],"sources":["/Users/granthu/VC Prototype/vc/audio-redaction-ui/frontend/src/components/AudioRedactionUI.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport highlightData from \"../data/conversation-5300643.json\"\n\nfunction AudioRedactionUI() {\n    const [transcript, setTranscript] = useState([\n    ]);\n\n    const fetchTranscript = async () => {\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/extract-transcript\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            body: JSON.stringify(highlightData),\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"failed to fetch transcript\");\n        }\n        const data = await response.json();\n        setTranscript(data);\n      } catch (error) {\n        console.error(\"Error fetching transcript:\", error);\n      }\n    }\n\n    useEffect(() => {\n      fetchTranscript();\n    }, []);\n\n    const [selectedWords, setSelectedWords] = useState([]);\n\n    const toggleWordSelection = (word) => {\n        if (selectedWords.includes(word)) {\n            setSelectedWords(selectedWords.filter((w) => w !== word));\n        } else {\n            setSelectedWords([...selectedWords, word]);\n        }\n    };\n\n    const redactWords = () => {\n        alert(`Redacting: ${selectedWords.join(\", \")}`);\n        // Here, you'd trigger the redaction logic for the selected words.\n    };\n\n    // return (\n    //     <div style={{ fontFamily: \"Arial, sans-serif\", padding: \"20px\" }}>\n    //         <h1>Audio Redaction Tool</h1>\n    //         <p>Select words to redact from the transcript:</p>\n\n    //         {/* Transcript */}\n    //         <div style={{ border: \"1px solid #ddd\", padding: \"10px\", marginBottom: \"20px\" }}>\n    //             {transcript.map((item, index) => (\n    //                 <span\n    //                     key={index}\n    //                     onClick={() => toggleWordSelection(item.word)}\n    //                     style={{\n    //                         display: \"inline-block\",\n    //                         margin: \"5px\",\n    //                         padding: \"5px 10px\",\n    //                         borderRadius: \"5px\",\n    //                         cursor: \"pointer\",\n    //                         backgroundColor: selectedWords.includes(item.word)\n    //                             ? \"red\"\n    //                             : \"#f0f0f0\",\n    //                         color: selectedWords.includes(item.word)\n    //                             ? \"white\"\n    //                             : \"black\",\n    //                     }}\n    //                 >\n    //                     {item.word}\n    //                 </span>\n    //             ))}\n    //         </div>\n\n    //         {/* Redact Button */}\n    //         {selectedWords.length > 0 && (\n    //             <button\n    //                 onClick={redactWords}\n    //                 style={{\n    //                     padding: \"10px 20px\",\n    //                     backgroundColor: \"#007BFF\",\n    //                     color: \"white\",\n    //                     border: \"none\",\n    //                     borderRadius: \"5px\",\n    //                     cursor: \"pointer\",\n    //                 }}\n    //             >\n    //                 Redact Selected Words\n    //             </button>\n    //         )}\n    //     </div>\n    // );\n    return (\n      <div style={{ fontFamily: \"Arial, sans-serif\", padding: \"20px\" }}>\n          <h1>Audio Redaction Tool</h1>\n          <p>Transcript loaded from the JSON file:</p>\n\n          {/* Display Transcript */}\n          <div style={{ marginTop: \"20px\", border: \"1px solid #ddd\", padding: \"10px\" }}>\n              {transcript.length > 0 ? (\n                  transcript.map((item, index) => (\n                      <div key={index}>\n                          <strong>{item.word}</strong> (start: {item.start}, end: {item.end})\n                      </div>\n                  ))\n              ) : (\n                  <p>Loading transcript...</p>\n              )}\n          </div>\n      </div>\n  );\n}\n\nexport default AudioRedactionUI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}